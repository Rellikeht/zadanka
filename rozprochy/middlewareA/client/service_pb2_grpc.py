# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DeviceRegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDevices = channel.unary_unary(
                '/common.DeviceRegistry/GetDevices',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.DevInfoResponse.FromString,
                _registered_method=True)
        self.GetDeviceState = channel.unary_unary(
                '/common.DeviceRegistry/GetDeviceState',
                request_serializer=service__pb2.Id.SerializeToString,
                response_deserializer=service__pb2.DevStateResponse.FromString,
                _registered_method=True)
        self.ToggleDevice = channel.unary_unary(
                '/common.DeviceRegistry/ToggleDevice',
                request_serializer=service__pb2.Id.SerializeToString,
                response_deserializer=service__pb2.SimpleResponse.FromString,
                _registered_method=True)


class DeviceRegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToggleDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDevices,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.DevInfoResponse.SerializeToString,
            ),
            'GetDeviceState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceState,
                    request_deserializer=service__pb2.Id.FromString,
                    response_serializer=service__pb2.DevStateResponse.SerializeToString,
            ),
            'ToggleDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ToggleDevice,
                    request_deserializer=service__pb2.Id.FromString,
                    response_serializer=service__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'common.DeviceRegistry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('common.DeviceRegistry', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DeviceRegistry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.DeviceRegistry/GetDevices',
            service__pb2.Empty.SerializeToString,
            service__pb2.DevInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeviceState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.DeviceRegistry/GetDeviceState',
            service__pb2.Id.SerializeToString,
            service__pb2.DevStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ToggleDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.DeviceRegistry/ToggleDevice',
            service__pb2.Id.SerializeToString,
            service__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HeaterControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetTemp = channel.unary_unary(
                '/common.HeaterController/SetTemp',
                request_serializer=service__pb2.TempInfo.SerializeToString,
                response_deserializer=service__pb2.SimpleResponse.FromString,
                _registered_method=True)
        self.SetPower = channel.unary_unary(
                '/common.HeaterController/SetPower',
                request_serializer=service__pb2.PowerInfo.SerializeToString,
                response_deserializer=service__pb2.SimpleResponse.FromString,
                _registered_method=True)


class HeaterControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetTemp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPower(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeaterControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTemp,
                    request_deserializer=service__pb2.TempInfo.FromString,
                    response_serializer=service__pb2.SimpleResponse.SerializeToString,
            ),
            'SetPower': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPower,
                    request_deserializer=service__pb2.PowerInfo.FromString,
                    response_serializer=service__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'common.HeaterController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('common.HeaterController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HeaterController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.HeaterController/SetTemp',
            service__pb2.TempInfo.SerializeToString,
            service__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.HeaterController/SetPower',
            service__pb2.PowerInfo.SerializeToString,
            service__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SecurityControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ToggleNightVision = channel.unary_unary(
                '/common.SecurityController/ToggleNightVision',
                request_serializer=service__pb2.Id.SerializeToString,
                response_deserializer=service__pb2.SimpleResponse.FromString,
                _registered_method=True)


class SecurityControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ToggleNightVision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecurityControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ToggleNightVision': grpc.unary_unary_rpc_method_handler(
                    servicer.ToggleNightVision,
                    request_deserializer=service__pb2.Id.FromString,
                    response_serializer=service__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'common.SecurityController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('common.SecurityController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SecurityController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ToggleNightVision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.SecurityController/ToggleNightVision',
            service__pb2.Id.SerializeToString,
            service__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
