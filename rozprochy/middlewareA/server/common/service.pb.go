// head and helpers {{{

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: common/service.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeterType int32

const (
	MeterType_THERMOMETER MeterType = 0
	MeterType_CO_METER    MeterType = 1
	MeterType_BAROMETER   MeterType = 2
)

// Enum value maps for MeterType.
var (
	MeterType_name = map[int32]string{
		0: "THERMOMETER",
		1: "CO_METER",
		2: "BAROMETER",
	}
	MeterType_value = map[string]int32{
		"THERMOMETER": 0,
		"CO_METER":    1,
		"BAROMETER":   2,
	}
)

func (x MeterType) Enum() *MeterType {
	p := new(MeterType)
	*p = x
	return p
}

func (x MeterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeterType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_service_proto_enumTypes[0].Descriptor()
}

func (MeterType) Type() protoreflect.EnumType {
	return &file_common_service_proto_enumTypes[0]
}

func (x MeterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MeterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MeterType(num)
	return nil
}

// Deprecated: Use MeterType.Descriptor instead.
func (MeterType) EnumDescriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{0}
}

type CODanger int32

const (
	CODanger_SAFE      CODanger = 0
	CODanger_WARNING   CODanger = 1
	CODanger_DANGEROUS CODanger = 2
)

// Enum value maps for CODanger.
var (
	CODanger_name = map[int32]string{
		0: "SAFE",
		1: "WARNING",
		2: "DANGEROUS",
	}
	CODanger_value = map[string]int32{
		"SAFE":      0,
		"WARNING":   1,
		"DANGEROUS": 2,
	}
)

func (x CODanger) Enum() *CODanger {
	p := new(CODanger)
	*p = x
	return p
}

func (x CODanger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CODanger) Descriptor() protoreflect.EnumDescriptor {
	return file_common_service_proto_enumTypes[1].Descriptor()
}

func (CODanger) Type() protoreflect.EnumType {
	return &file_common_service_proto_enumTypes[1]
}

func (x CODanger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CODanger) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CODanger(num)
	return nil
}

// Deprecated: Use CODanger.Descriptor instead.
func (CODanger) EnumDescriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{1}
}

type DeviceType int32

const (
	DeviceType_METER    DeviceType = 0
	DeviceType_HEATER   DeviceType = 1
	DeviceType_SECURITY DeviceType = 2
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "METER",
		1: "HEATER",
		2: "SECURITY",
	}
	DeviceType_value = map[string]int32{
		"METER":    0,
		"HEATER":   1,
		"SECURITY": 2,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_service_proto_enumTypes[2].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_common_service_proto_enumTypes[2]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceType(num)
	return nil
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{2}
}

type WorkingState int32

const (
	WorkingState_ON       WorkingState = 0
	WorkingState_OFF      WorkingState = 1
	WorkingState_STARTING WorkingState = 2
	WorkingState_STOPPING WorkingState = 3
)

// Enum value maps for WorkingState.
var (
	WorkingState_name = map[int32]string{
		0: "ON",
		1: "OFF",
		2: "STARTING",
		3: "STOPPING",
	}
	WorkingState_value = map[string]int32{
		"ON":       0,
		"OFF":      1,
		"STARTING": 2,
		"STOPPING": 3,
	}
)

func (x WorkingState) Enum() *WorkingState {
	p := new(WorkingState)
	*p = x
	return p
}

func (x WorkingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkingState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_service_proto_enumTypes[3].Descriptor()
}

func (WorkingState) Type() protoreflect.EnumType {
	return &file_common_service_proto_enumTypes[3]
}

func (x WorkingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WorkingState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WorkingState(num)
	return nil
}

// Deprecated: Use WorkingState.Descriptor instead.
func (WorkingState) EnumDescriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{3}
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_common_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{0}
}

type SimpleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *uint64                `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleResponse) Reset() {
	*x = SimpleResponse{}
	mi := &file_common_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponse) ProtoMessage() {}

func (x *SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponse.ProtoReflect.Descriptor instead.
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleResponse) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type Temperature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *float64               `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Temperature) Reset() {
	*x = Temperature{}
	mi := &file_common_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temperature) ProtoMessage() {}

func (x *Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temperature.ProtoReflect.Descriptor instead.
func (*Temperature) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{2}
}

func (x *Temperature) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type COLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         *float64               `protobuf:"fixed64,1,req,name=level" json:"level,omitempty"`
	Danger        *CODanger              `protobuf:"varint,2,opt,name=danger,enum=common.CODanger" json:"danger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *COLevel) Reset() {
	*x = COLevel{}
	mi := &file_common_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *COLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COLevel) ProtoMessage() {}

func (x *COLevel) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COLevel.ProtoReflect.Descriptor instead.
func (*COLevel) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{3}
}

func (x *COLevel) GetLevel() float64 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *COLevel) GetDanger() CODanger {
	if x != nil && x.Danger != nil {
		return *x.Danger
	}
	return CODanger_SAFE
}

type Pressure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pressure      *float64               `protobuf:"fixed64,1,req,name=pressure" json:"pressure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pressure) Reset() {
	*x = Pressure{}
	mi := &file_common_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pressure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pressure) ProtoMessage() {}

func (x *Pressure) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pressure.ProtoReflect.Descriptor instead.
func (*Pressure) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{4}
}

func (x *Pressure) GetPressure() float64 {
	if x != nil && x.Pressure != nil {
		return *x.Pressure
	}
	return 0
}

type Meter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *MeterType             `protobuf:"varint,1,req,name=type,enum=common.MeterType" json:"type,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Meter) Reset() {
	*x = Meter{}
	mi := &file_common_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meter) ProtoMessage() {}

func (x *Meter) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meter.ProtoReflect.Descriptor instead.
func (*Meter) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{5}
}

func (x *Meter) GetType() MeterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MeterType_THERMOMETER
}

type MeterState struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	MeterType *MeterType             `protobuf:"varint,1,req,name=meter_type,json=meterType,enum=common.MeterType" json:"meter_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*MeterState_Temperature
	//	*MeterState_CoLevel
	//	*MeterState_Pressure
	Value         isMeterState_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeterState) Reset() {
	*x = MeterState{}
	mi := &file_common_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterState) ProtoMessage() {}

func (x *MeterState) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterState.ProtoReflect.Descriptor instead.
func (*MeterState) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{6}
}

func (x *MeterState) GetMeterType() MeterType {
	if x != nil && x.MeterType != nil {
		return *x.MeterType
	}
	return MeterType_THERMOMETER
}

func (x *MeterState) GetValue() isMeterState_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MeterState) GetTemperature() *Temperature {
	if x != nil {
		if x, ok := x.Value.(*MeterState_Temperature); ok {
			return x.Temperature
		}
	}
	return nil
}

func (x *MeterState) GetCoLevel() *COLevel {
	if x != nil {
		if x, ok := x.Value.(*MeterState_CoLevel); ok {
			return x.CoLevel
		}
	}
	return nil
}

func (x *MeterState) GetPressure() *Pressure {
	if x != nil {
		if x, ok := x.Value.(*MeterState_Pressure); ok {
			return x.Pressure
		}
	}
	return nil
}

type isMeterState_Value interface {
	isMeterState_Value()
}

type MeterState_Temperature struct {
	Temperature *Temperature `protobuf:"bytes,2,opt,name=temperature,oneof"`
}

type MeterState_CoLevel struct {
	CoLevel *COLevel `protobuf:"bytes,3,opt,name=co_level,json=coLevel,oneof"`
}

type MeterState_Pressure struct {
	Pressure *Pressure `protobuf:"bytes,4,opt,name=pressure,oneof"`
}

func (*MeterState_Temperature) isMeterState_Value() {}

func (*MeterState_CoLevel) isMeterState_Value() {}

func (*MeterState_Pressure) isMeterState_Value() {}

type Heater struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxTemp       *float64               `protobuf:"fixed64,1,req,name=max_temp,json=maxTemp" json:"max_temp,omitempty"`
	MinTemp       *float64               `protobuf:"fixed64,2,req,name=min_temp,json=minTemp" json:"min_temp,omitempty"`
	Power         *uint64                `protobuf:"varint,3,req,name=power" json:"power,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heater) Reset() {
	*x = Heater{}
	mi := &file_common_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heater) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heater) ProtoMessage() {}

func (x *Heater) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heater.ProtoReflect.Descriptor instead.
func (*Heater) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{7}
}

func (x *Heater) GetMaxTemp() float64 {
	if x != nil && x.MaxTemp != nil {
		return *x.MaxTemp
	}
	return 0
}

func (x *Heater) GetMinTemp() float64 {
	if x != nil && x.MinTemp != nil {
		return *x.MinTemp
	}
	return 0
}

func (x *Heater) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

type HeaterState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentTemp   *float64               `protobuf:"fixed64,1,req,name=current_temp,json=currentTemp" json:"current_temp,omitempty"`
	SetTemp       *float64               `protobuf:"fixed64,2,req,name=set_temp,json=setTemp" json:"set_temp,omitempty"`
	CurrentPower  *uint64                `protobuf:"varint,3,req,name=current_power,json=currentPower" json:"current_power,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaterState) Reset() {
	*x = HeaterState{}
	mi := &file_common_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaterState) ProtoMessage() {}

func (x *HeaterState) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaterState.ProtoReflect.Descriptor instead.
func (*HeaterState) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{8}
}

func (x *HeaterState) GetCurrentTemp() float64 {
	if x != nil && x.CurrentTemp != nil {
		return *x.CurrentTemp
	}
	return 0
}

func (x *HeaterState) GetSetTemp() float64 {
	if x != nil && x.SetTemp != nil {
		return *x.SetTemp
	}
	return 0
}

func (x *HeaterState) GetCurrentPower() uint64 {
	if x != nil && x.CurrentPower != nil {
		return *x.CurrentPower
	}
	return 0
}

type SecurityDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         *uint64                `protobuf:"varint,1,req,name=width" json:"width,omitempty"`
	Height        *uint64                `protobuf:"varint,2,req,name=height" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityDevice) Reset() {
	*x = SecurityDevice{}
	mi := &file_common_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDevice) ProtoMessage() {}

func (x *SecurityDevice) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDevice.ProtoReflect.Descriptor instead.
func (*SecurityDevice) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{9}
}

func (x *SecurityDevice) GetWidth() uint64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *SecurityDevice) GetHeight() uint64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type SecurityState struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MovementDetected *bool                  `protobuf:"varint,1,req,name=movement_detected,json=movementDetected" json:"movement_detected,omitempty"`
	Tampered         *bool                  `protobuf:"varint,2,req,name=tampered" json:"tampered,omitempty"`
	NightVision      *bool                  `protobuf:"varint,3,req,name=night_vision,json=nightVision" json:"night_vision,omitempty"` //
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SecurityState) Reset() {
	*x = SecurityState{}
	mi := &file_common_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityState) ProtoMessage() {}

func (x *SecurityState) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityState.ProtoReflect.Descriptor instead.
func (*SecurityState) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{10}
}

func (x *SecurityState) GetMovementDetected() bool {
	if x != nil && x.MovementDetected != nil {
		return *x.MovementDetected
	}
	return false
}

func (x *SecurityState) GetTampered() bool {
	if x != nil && x.Tampered != nil {
		return *x.Tampered
	}
	return false
}

func (x *SecurityState) GetNightVision() bool {
	if x != nil && x.NightVision != nil {
		return *x.NightVision
	}
	return false
}

type Id struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Id) Reset() {
	*x = Id{}
	mi := &file_common_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{11}
}

func (x *Id) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type DeviceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  *DeviceType            `protobuf:"varint,1,req,name=type,enum=common.DeviceType" json:"type,omitempty"`
	Id    *Id                    `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	Name  *string                `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to TypeInfo:
	//
	//	*DeviceInfo_Meter
	//	*DeviceInfo_Heater
	//	*DeviceInfo_Security
	TypeInfo      isDeviceInfo_TypeInfo `protobuf_oneof:"type_info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	mi := &file_common_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceInfo) GetType() DeviceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DeviceType_METER
}

func (x *DeviceInfo) GetId() *Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceInfo) GetTypeInfo() isDeviceInfo_TypeInfo {
	if x != nil {
		return x.TypeInfo
	}
	return nil
}

func (x *DeviceInfo) GetMeter() *Meter {
	if x != nil {
		if x, ok := x.TypeInfo.(*DeviceInfo_Meter); ok {
			return x.Meter
		}
	}
	return nil
}

func (x *DeviceInfo) GetHeater() *Heater {
	if x != nil {
		if x, ok := x.TypeInfo.(*DeviceInfo_Heater); ok {
			return x.Heater
		}
	}
	return nil
}

func (x *DeviceInfo) GetSecurity() *SecurityDevice {
	if x != nil {
		if x, ok := x.TypeInfo.(*DeviceInfo_Security); ok {
			return x.Security
		}
	}
	return nil
}

type isDeviceInfo_TypeInfo interface {
	isDeviceInfo_TypeInfo()
}

type DeviceInfo_Meter struct {
	Meter *Meter `protobuf:"bytes,4,opt,name=meter,oneof"`
}

type DeviceInfo_Heater struct {
	Heater *Heater `protobuf:"bytes,5,opt,name=heater,oneof"`
}

type DeviceInfo_Security struct {
	Security *SecurityDevice `protobuf:"bytes,6,opt,name=security,oneof"`
}

func (*DeviceInfo_Meter) isDeviceInfo_TypeInfo() {}

func (*DeviceInfo_Heater) isDeviceInfo_TypeInfo() {}

func (*DeviceInfo_Security) isDeviceInfo_TypeInfo() {}

type DevicesInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*DeviceInfo          `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DevicesInfo) Reset() {
	*x = DevicesInfo{}
	mi := &file_common_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesInfo) ProtoMessage() {}

func (x *DevicesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesInfo.ProtoReflect.Descriptor instead.
func (*DevicesInfo) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{13}
}

func (x *DevicesInfo) GetDevices() []*DeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type DeviceState struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	WorkingState *WorkingState          `protobuf:"varint,1,req,name=working_state,json=workingState,enum=common.WorkingState" json:"working_state,omitempty"`
	// Types that are valid to be assigned to TypeState:
	//
	//	*DeviceState_MeterState
	//	*DeviceState_HeaterState
	//	*DeviceState_SecurityState
	TypeState     isDeviceState_TypeState `protobuf_oneof:"type_state"`
	IsOk          *bool                   `protobuf:"varint,5,opt,name=is_ok,json=isOk" json:"is_ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	mi := &file_common_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceState) GetWorkingState() WorkingState {
	if x != nil && x.WorkingState != nil {
		return *x.WorkingState
	}
	return WorkingState_ON
}

func (x *DeviceState) GetTypeState() isDeviceState_TypeState {
	if x != nil {
		return x.TypeState
	}
	return nil
}

func (x *DeviceState) GetMeterState() *MeterState {
	if x != nil {
		if x, ok := x.TypeState.(*DeviceState_MeterState); ok {
			return x.MeterState
		}
	}
	return nil
}

func (x *DeviceState) GetHeaterState() *HeaterState {
	if x != nil {
		if x, ok := x.TypeState.(*DeviceState_HeaterState); ok {
			return x.HeaterState
		}
	}
	return nil
}

func (x *DeviceState) GetSecurityState() *SecurityState {
	if x != nil {
		if x, ok := x.TypeState.(*DeviceState_SecurityState); ok {
			return x.SecurityState
		}
	}
	return nil
}

func (x *DeviceState) GetIsOk() bool {
	if x != nil && x.IsOk != nil {
		return *x.IsOk
	}
	return false
}

type isDeviceState_TypeState interface {
	isDeviceState_TypeState()
}

type DeviceState_MeterState struct {
	MeterState *MeterState `protobuf:"bytes,2,opt,name=meter_state,json=meterState,oneof"`
}

type DeviceState_HeaterState struct {
	HeaterState *HeaterState `protobuf:"bytes,3,opt,name=heater_state,json=heaterState,oneof"`
}

type DeviceState_SecurityState struct {
	SecurityState *SecurityState `protobuf:"bytes,4,opt,name=security_state,json=securityState,oneof"`
}

func (*DeviceState_MeterState) isDeviceState_TypeState() {}

func (*DeviceState_HeaterState) isDeviceState_TypeState() {}

func (*DeviceState_SecurityState) isDeviceState_TypeState() {}

type DevInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *uint64                `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	Devices       *DevicesInfo           `protobuf:"bytes,2,req,name=devices" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DevInfoResponse) Reset() {
	*x = DevInfoResponse{}
	mi := &file_common_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevInfoResponse) ProtoMessage() {}

func (x *DevInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevInfoResponse.ProtoReflect.Descriptor instead.
func (*DevInfoResponse) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{15}
}

func (x *DevInfoResponse) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DevInfoResponse) GetDevices() *DevicesInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type DevStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *uint64                `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	State         *DeviceState           `protobuf:"bytes,2,req,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DevStateResponse) Reset() {
	*x = DevStateResponse{}
	mi := &file_common_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevStateResponse) ProtoMessage() {}

func (x *DevStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevStateResponse.ProtoReflect.Descriptor instead.
func (*DevStateResponse) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{16}
}

func (x *DevStateResponse) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DevStateResponse) GetState() *DeviceState {
	if x != nil {
		return x.State
	}
	return nil
}

type TempInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *Id                    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	NewTemp       *float64               `protobuf:"fixed64,2,req,name=new_temp,json=newTemp" json:"new_temp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TempInfo) Reset() {
	*x = TempInfo{}
	mi := &file_common_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempInfo) ProtoMessage() {}

func (x *TempInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempInfo.ProtoReflect.Descriptor instead.
func (*TempInfo) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{17}
}

func (x *TempInfo) GetId() *Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TempInfo) GetNewTemp() float64 {
	if x != nil && x.NewTemp != nil {
		return *x.NewTemp
	}
	return 0
}

type PowerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *Id                    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	NewPower      *uint64                `protobuf:"varint,2,req,name=new_power,json=newPower" json:"new_power,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PowerInfo) Reset() {
	*x = PowerInfo{}
	mi := &file_common_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerInfo) ProtoMessage() {}

func (x *PowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerInfo.ProtoReflect.Descriptor instead.
func (*PowerInfo) Descriptor() ([]byte, []int) {
	return file_common_service_proto_rawDescGZIP(), []int{18}
}

func (x *PowerInfo) GetId() *Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PowerInfo) GetNewPower() uint64 {
	if x != nil && x.NewPower != nil {
		return *x.NewPower
	}
	return 0
}

var File_common_service_proto protoreflect.FileDescriptor

const file_common_service_proto_rawDesc = "" +
	"\n" +
	"\x14common/service.proto\x12\x06common\"\a\n" +
	"\x05Empty\"(\n" +
	"\x0eSimpleResponse\x12\x16\n" +
	"\x06status\x18\x01 \x02(\x04R\x06status\"#\n" +
	"\vTemperature\x12\x14\n" +
	"\x05value\x18\x01 \x02(\x01R\x05value\"K\n" +
	"\bCO_level\x12\x14\n" +
	"\x05level\x18\x01 \x02(\x01R\x05level\x12)\n" +
	"\x06danger\x18\x02 \x01(\x0e2\x11.common.CO_dangerR\x06danger\"&\n" +
	"\bPressure\x12\x1a\n" +
	"\bpressure\x18\x01 \x02(\x01R\bpressure\".\n" +
	"\x05Meter\x12%\n" +
	"\x04type\x18\x01 \x02(\x0e2\x11.common.MeterTypeR\x04type\"\xdf\x01\n" +
	"\n" +
	"MeterState\x120\n" +
	"\n" +
	"meter_type\x18\x01 \x02(\x0e2\x11.common.MeterTypeR\tmeterType\x127\n" +
	"\vtemperature\x18\x02 \x01(\v2\x13.common.TemperatureH\x00R\vtemperature\x12-\n" +
	"\bco_level\x18\x03 \x01(\v2\x10.common.CO_levelH\x00R\acoLevel\x12.\n" +
	"\bpressure\x18\x04 \x01(\v2\x10.common.PressureH\x00R\bpressureB\a\n" +
	"\x05value\"T\n" +
	"\x06Heater\x12\x19\n" +
	"\bmax_temp\x18\x01 \x02(\x01R\amaxTemp\x12\x19\n" +
	"\bmin_temp\x18\x02 \x02(\x01R\aminTemp\x12\x14\n" +
	"\x05power\x18\x03 \x02(\x04R\x05power\"p\n" +
	"\vHeaterState\x12!\n" +
	"\fcurrent_temp\x18\x01 \x02(\x01R\vcurrentTemp\x12\x19\n" +
	"\bset_temp\x18\x02 \x02(\x01R\asetTemp\x12#\n" +
	"\rcurrent_power\x18\x03 \x02(\x04R\fcurrentPower\">\n" +
	"\x0eSecurityDevice\x12\x14\n" +
	"\x05width\x18\x01 \x02(\x04R\x05width\x12\x16\n" +
	"\x06height\x18\x02 \x02(\x04R\x06height\"{\n" +
	"\rSecurityState\x12+\n" +
	"\x11movement_detected\x18\x01 \x02(\bR\x10movementDetected\x12\x1a\n" +
	"\btampered\x18\x02 \x02(\bR\btampered\x12!\n" +
	"\fnight_vision\x18\x03 \x02(\bR\vnightVision\"\x14\n" +
	"\x02Id\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\x04R\x02id\"\xf8\x01\n" +
	"\n" +
	"DeviceInfo\x12&\n" +
	"\x04type\x18\x01 \x02(\x0e2\x12.common.DeviceTypeR\x04type\x12\x1a\n" +
	"\x02id\x18\x02 \x02(\v2\n" +
	".common.IdR\x02id\x12\x12\n" +
	"\x04name\x18\x03 \x02(\tR\x04name\x12%\n" +
	"\x05meter\x18\x04 \x01(\v2\r.common.MeterH\x00R\x05meter\x12(\n" +
	"\x06heater\x18\x05 \x01(\v2\x0e.common.HeaterH\x00R\x06heater\x124\n" +
	"\bsecurity\x18\x06 \x01(\v2\x16.common.SecurityDeviceH\x00R\bsecurityB\v\n" +
	"\ttype_info\";\n" +
	"\vDevicesInfo\x12,\n" +
	"\adevices\x18\x01 \x03(\v2\x12.common.DeviceInfoR\adevices\"\x9c\x02\n" +
	"\vDeviceState\x129\n" +
	"\rworking_state\x18\x01 \x02(\x0e2\x14.common.WorkingStateR\fworkingState\x125\n" +
	"\vmeter_state\x18\x02 \x01(\v2\x12.common.MeterStateH\x00R\n" +
	"meterState\x128\n" +
	"\fheater_state\x18\x03 \x01(\v2\x13.common.HeaterStateH\x00R\vheaterState\x12>\n" +
	"\x0esecurity_state\x18\x04 \x01(\v2\x15.common.SecurityStateH\x00R\rsecurityState\x12\x13\n" +
	"\x05is_ok\x18\x05 \x01(\bR\x04isOkB\f\n" +
	"\n" +
	"type_state\"X\n" +
	"\x0fDevInfoResponse\x12\x16\n" +
	"\x06status\x18\x01 \x02(\x04R\x06status\x12-\n" +
	"\adevices\x18\x02 \x02(\v2\x13.common.DevicesInfoR\adevices\"U\n" +
	"\x10DevStateResponse\x12\x16\n" +
	"\x06status\x18\x01 \x02(\x04R\x06status\x12)\n" +
	"\x05state\x18\x02 \x02(\v2\x13.common.DeviceStateR\x05state\"A\n" +
	"\bTempInfo\x12\x1a\n" +
	"\x02id\x18\x01 \x02(\v2\n" +
	".common.IdR\x02id\x12\x19\n" +
	"\bnew_temp\x18\x02 \x02(\x01R\anewTemp\"D\n" +
	"\tPowerInfo\x12\x1a\n" +
	"\x02id\x18\x01 \x02(\v2\n" +
	".common.IdR\x02id\x12\x1b\n" +
	"\tnew_power\x18\x02 \x02(\x04R\bnewPower*9\n" +
	"\tMeterType\x12\x0f\n" +
	"\vTHERMOMETER\x10\x00\x12\f\n" +
	"\bCO_METER\x10\x01\x12\r\n" +
	"\tBAROMETER\x10\x02*1\n" +
	"\tCO_danger\x12\b\n" +
	"\x04SAFE\x10\x00\x12\v\n" +
	"\aWARNING\x10\x01\x12\r\n" +
	"\tDANGEROUS\x10\x02*1\n" +
	"\n" +
	"DeviceType\x12\t\n" +
	"\x05METER\x10\x00\x12\n" +
	"\n" +
	"\x06HEATER\x10\x01\x12\f\n" +
	"\bSECURITY\x10\x02*;\n" +
	"\fWorkingState\x12\x06\n" +
	"\x02ON\x10\x00\x12\a\n" +
	"\x03OFF\x10\x01\x12\f\n" +
	"\bSTARTING\x10\x02\x12\f\n" +
	"\bSTOPPING\x10\x032\xb8\x01\n" +
	"\x0eDeviceRegistry\x126\n" +
	"\n" +
	"GetDevices\x12\r.common.Empty\x1a\x17.common.DevInfoResponse\"\x00\x128\n" +
	"\x0eGetDeviceState\x12\n" +
	".common.Id\x1a\x18.common.DevStateResponse\"\x00\x124\n" +
	"\fToggleDevice\x12\n" +
	".common.Id\x1a\x16.common.SimpleResponse\"\x002\x82\x01\n" +
	"\x10HeaterController\x125\n" +
	"\aSetTemp\x12\x10.common.TempInfo\x1a\x16.common.SimpleResponse\"\x00\x127\n" +
	"\bSetPower\x12\x11.common.PowerInfo\x1a\x16.common.SimpleResponse\"\x002O\n" +
	"\x12SecurityController\x129\n" +
	"\x11ToggleNightVision\x12\n" +
	".common.Id\x1a\x16.common.SimpleResponse\"\x00B-Z+github.com/Rellikeht/zadanieA/server/common"

var (
	file_common_service_proto_rawDescOnce sync.Once
	file_common_service_proto_rawDescData []byte
)

func file_common_service_proto_rawDescGZIP() []byte {
	file_common_service_proto_rawDescOnce.Do(func() {
		file_common_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_service_proto_rawDesc), len(file_common_service_proto_rawDesc)))
	})
	return file_common_service_proto_rawDescData
}

var file_common_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_common_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_common_service_proto_goTypes = []any{
	(MeterType)(0),           // 0: common.MeterType
	(CODanger)(0),            // 1: common.CO_danger
	(DeviceType)(0),          // 2: common.DeviceType
	(WorkingState)(0),        // 3: common.WorkingState
	(*Empty)(nil),            // 4: common.Empty
	(*SimpleResponse)(nil),   // 5: common.SimpleResponse
	(*Temperature)(nil),      // 6: common.Temperature
	(*COLevel)(nil),          // 7: common.CO_level
	(*Pressure)(nil),         // 8: common.Pressure
	(*Meter)(nil),            // 9: common.Meter
	(*MeterState)(nil),       // 10: common.MeterState
	(*Heater)(nil),           // 11: common.Heater
	(*HeaterState)(nil),      // 12: common.HeaterState
	(*SecurityDevice)(nil),   // 13: common.SecurityDevice
	(*SecurityState)(nil),    // 14: common.SecurityState
	(*Id)(nil),               // 15: common.Id
	(*DeviceInfo)(nil),       // 16: common.DeviceInfo
	(*DevicesInfo)(nil),      // 17: common.DevicesInfo
	(*DeviceState)(nil),      // 18: common.DeviceState
	(*DevInfoResponse)(nil),  // 19: common.DevInfoResponse
	(*DevStateResponse)(nil), // 20: common.DevStateResponse
	(*TempInfo)(nil),         // 21: common.TempInfo
	(*PowerInfo)(nil),        // 22: common.PowerInfo
}
var file_common_service_proto_depIdxs = []int32{
	1,  // 0: common.CO_level.danger:type_name -> common.CO_danger
	0,  // 1: common.Meter.type:type_name -> common.MeterType
	0,  // 2: common.MeterState.meter_type:type_name -> common.MeterType
	6,  // 3: common.MeterState.temperature:type_name -> common.Temperature
	7,  // 4: common.MeterState.co_level:type_name -> common.CO_level
	8,  // 5: common.MeterState.pressure:type_name -> common.Pressure
	2,  // 6: common.DeviceInfo.type:type_name -> common.DeviceType
	15, // 7: common.DeviceInfo.id:type_name -> common.Id
	9,  // 8: common.DeviceInfo.meter:type_name -> common.Meter
	11, // 9: common.DeviceInfo.heater:type_name -> common.Heater
	13, // 10: common.DeviceInfo.security:type_name -> common.SecurityDevice
	16, // 11: common.DevicesInfo.devices:type_name -> common.DeviceInfo
	3,  // 12: common.DeviceState.working_state:type_name -> common.WorkingState
	10, // 13: common.DeviceState.meter_state:type_name -> common.MeterState
	12, // 14: common.DeviceState.heater_state:type_name -> common.HeaterState
	14, // 15: common.DeviceState.security_state:type_name -> common.SecurityState
	17, // 16: common.DevInfoResponse.devices:type_name -> common.DevicesInfo
	18, // 17: common.DevStateResponse.state:type_name -> common.DeviceState
	15, // 18: common.TempInfo.id:type_name -> common.Id
	15, // 19: common.PowerInfo.id:type_name -> common.Id
	4,  // 20: common.DeviceRegistry.GetDevices:input_type -> common.Empty
	15, // 21: common.DeviceRegistry.GetDeviceState:input_type -> common.Id
	15, // 22: common.DeviceRegistry.ToggleDevice:input_type -> common.Id
	21, // 23: common.HeaterController.SetTemp:input_type -> common.TempInfo
	22, // 24: common.HeaterController.SetPower:input_type -> common.PowerInfo
	15, // 25: common.SecurityController.ToggleNightVision:input_type -> common.Id
	19, // 26: common.DeviceRegistry.GetDevices:output_type -> common.DevInfoResponse
	20, // 27: common.DeviceRegistry.GetDeviceState:output_type -> common.DevStateResponse
	5,  // 28: common.DeviceRegistry.ToggleDevice:output_type -> common.SimpleResponse
	5,  // 29: common.HeaterController.SetTemp:output_type -> common.SimpleResponse
	5,  // 30: common.HeaterController.SetPower:output_type -> common.SimpleResponse
	5,  // 31: common.SecurityController.ToggleNightVision:output_type -> common.SimpleResponse
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_common_service_proto_init() }
func file_common_service_proto_init() {
	if File_common_service_proto != nil {
		return
	}
	file_common_service_proto_msgTypes[6].OneofWrappers = []any{
		(*MeterState_Temperature)(nil),
		(*MeterState_CoLevel)(nil),
		(*MeterState_Pressure)(nil),
	}
	file_common_service_proto_msgTypes[12].OneofWrappers = []any{
		(*DeviceInfo_Meter)(nil),
		(*DeviceInfo_Heater)(nil),
		(*DeviceInfo_Security)(nil),
	}
	file_common_service_proto_msgTypes[14].OneofWrappers = []any{
		(*DeviceState_MeterState)(nil),
		(*DeviceState_HeaterState)(nil),
		(*DeviceState_SecurityState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_service_proto_rawDesc), len(file_common_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_common_service_proto_goTypes,
		DependencyIndexes: file_common_service_proto_depIdxs,
		EnumInfos:         file_common_service_proto_enumTypes,
		MessageInfos:      file_common_service_proto_msgTypes,
	}.Build()
	File_common_service_proto = out.File
	file_common_service_proto_goTypes = nil
	file_common_service_proto_depIdxs = nil
}
